c
params
c
params.c
params
property_params
c
exception
n
@property
n
params
c
@porperty
n
c
params.permit!
params.permit
params
params.require(:property)
property_params
c
property_params
n
property_params
c
Property.find(12)
Property.all
Property
admin?
n
params
c
Property.find(12)
Porperty.find(12)
@property
n
params
c
a.css('.card-body_item')
a = doc.parse(response.body)
doc.parse(response.body)
doc.parse
doc.xpath("//*[contains(concat(' ', normalize-space(@class), ' '), 'c-search-bar')]")
doc.xpath("//*[contains(concat(' ', normalize-space(@class), ' '), 'card-body')]")
doc.xpath("//*[contains(concat(' ', normalize-space(@class), ' '), 'pt-5')]").children
doc.xpath("//*[contains(concat(' ', normalize-space(@class), ' '), 'pt-5')]").childrens
doc.xpath("//*[contains(concat(' ', normalize-space(@class), ' '), 'pt-5')]")
doc.methods
doc
doc = Nokogiri::HTML(html)
html = response.body
response.body
response
html
doc
c
@properties = Property.find(@favorites.pluck(:property_id))
Property.find(@favorites.pluck(:property_id))
@favorites.pluck(:property_id)
@favorites.pluck(:favorite_id)
@favorites
n
@favorites
c
exception
n
c
description = doc.css("layout-rentals")
description = doc.css("package-luna")
description = doc.css("view-rentals")
c
description = doc.css("container")
description = doc.css("c-object-all")
description = doc.css("section.c-object-all")
c
description = doc.css("div.card-body_price")
description = doc.at("div.card-body_price")
doc.css()
c
description = doc.css("div.card-body_price").parent
description = doc.css("div.card-body_price")
description = doc.at("div.card-body_price")
description = doc.at("card-body_price")
description = doc.at('div.contains(.,"card-body")')
description = doc.at('//divcontains(.,"card-body")')
description = doc.at('//div//contains(.,"card-body")')
description = doc.at('div contains(.,"card-body")')
description = doc.at('div contains("card-body")')
description = doc.at('span h4:contains("card-body")')
description = doc.at('span h4:contains("d-flex")')
description = doc.at('span h4:contains("d-flex")').parent
description = doc.at('span h4:contains("data-v-7c0a3ea9")').parent
description = doc.at('span h4:contains("data-v-7c0a3ea9")')
description = doc.cat('span h4:contains("data-v-7c0a3ea9")')
description = doc.css('span h4:contains("data-v-7c0a3ea9")')
description = doc.css("span h4:contains("data-v-7c0a3ea9")")
description = doc.css("span h4:contains("Desired Title")")
description = doc.css("span.mr-2").text
description = doc.css("mr-2").text
description = doc.css("mr-2")
description = doc.css("mr-2"")
description = doc.css("mr-2"").text
doc = Nokogiri::HTML(html)
c
description = doc.css("p").text
doc = Nokogiri::HTML(html)
c
description = doc.css("p")
description = doc.css("p").text
doc = Nokogiri::HTML(html)
html
c
doc.css("//span[contains(@class, 'h3')]")
doc
c
ex
n
doc
c
html_products = document.css("div.card-body")
html_products = document.css(".card-body")
html_products = document.css("card-body")
document = Nokogiri::HTML(response.body)
# parsing the HTML document returned by the server 
c
document.css("li")
document = response.parsed_response
response.parsed_response.css("li")
response.parsed_response
response.html
document.css('l-rentals-container')
document = JSON.parse(response.body)
JSON.parse(response.body)
document.css('l-rentals-container')
document = Nokogiri::HTML(response.body)
document.css('l-rentals-container')
doc.css('l-rentals-container')
c
JSON.parse(response.body)
response.body
response
c
document.css('.mr-2')
document.css('.h4')
document.css('mr-2')
document.css('span')
document.css('span.h4')
document.css('span.mr-2')
document.css('')
document.css
document
document = Nokogiri::HTML(response.body)
response
c
doc.css('c-itemInfo__operator')
doc.css('c-itemInfo__attr')
doc.css('my-5')
doc.css('my-5"')
doc.css('title')
n
doc.c('c-itemInfo')
doc.css('c-itemInfo')
doc.css('title')
doc.children
doc.childern
doc.css('title')
doc.css[:title]
doc.css['title']
doc.css
doc.scc
n
c
house_list
n
doc
n
c
ex
n
c
doc.
doc.keys
doc
n
c
doc.css
doc
house_list
n
c
doc.css('.house-list-item')
house_list
n
doc
n
c
ns
n
c
Property.where(area: cities)
cities
c
Property.all.in_cities(cities)
Property.where.in_cities(cities)
Property.where(property_type: property_type).in_cities(cities)
Property.where(property_type: property_type).within_rent_range(min_rent, max_rent).within_net_size_range(min_net_size, max_net_size).in_cities(cities).in_districts(districts)
Property.where(property_type: property_type)
c
Property.where(area: cities)
cities
c
@properties
n
params
c
\
@properties
n
c
max_bedrooms
max_bedrooms.to_i
area
max_net_size
min_net_size
max_rent
min_rent
property_type
c
Property.where('property_type = ? OR rent BETWEEN ? AND ? OR net_size BETWEEN ? AND ? OR area IN (?) OR number_of_living_rooms <= ?', property_type, min_rent, max_rent, min_net_size, max_net_size, areas, max_bedrooms.to_i).count
Property.where('property_type = ? OR rent BETWEEN ? AND ? OR net_size BETWEEN ? AND ? OR area IN (?) OR number_of_living_rooms <= ?', property_type, min_rent, max_rent, min_net_size, max_net_size, areas, max_bedrooms.to_i)
params
c
@properties.present?
@properties.present
@properties
n
params
c
Property.where(property_type: params[:property_type])
Property.within_property_type(params[:property_type])
n
params[:property_type]
params
c
params[:property_type]
Property.residential_properties
params
c
params['registration'][:user].permit!
params['registration'][:user]
params['registration']
params
params.require(:registration).permit(:user['email'])
params.require(:registration).permit(user['email'])
params
